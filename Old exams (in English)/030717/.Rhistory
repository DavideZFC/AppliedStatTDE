W
W[2,3]
W[2,c(2,3)]
W[2,]
W[,c(2,3)]
v
rbind(v)
cbind(v)
a <- 1
b <- 2
c <- c(2,3,4)
d <- c(10,10,10)
Z <- matrix(c(1,10,3,10,5,10), nrow = 2, ncol = 3, byrow = F)
a+b # scalar + scalar
c+d # vector + vector
a*b # scalar * scalar
c*d # vector * vector (component-wise)
c+a # vettor + scalar
c^2 # attention: operations are always component-wise!
exp(c)
sum(c) # sums the components of c
prod(c) # returns the product of the components of c
V <- t(W) # transpose of a matrix
Z+W # matrix + matrix (component-wise)
Z*W # matrix * matrix (component-wise)
V*W # matrix * matrix (component-wise) (error!)
V %*% W # Matrix multiplication
W %*% V
W+a # matrix + scalar
W+c # matrix + vector
W+2:5
# Inverse of a matrix (square and invertible)
A <- matrix(c(11,13,12,14), ncol=2, nrow=2, byrow=TRUE)
det(A)
solve(A)
# Solution of a linear system Ax=b
b <- c(1,1)
solve(A,b)
district <- c('MI',  'MI',  'VA',  'BG',  'LO', 'LO',  'CR',  'Alt', 'CR',  'MI',
'Alt', 'CR',  'LO',  'VA',  'MI',  'Alt', 'LO',  'MI')
district <- factor(district,levels=c('MI','LO','BG','CR','VA','Alt'))
district
resass <- table(district) # table of absolute frequences
resass
resrel <- table(district)/length(district) # table of relative frequences
resrel
exam <- list (course = 'Applied Statistics',
date = '27/09/2014',
enrolled = 7,
corrected = 6,
student_id = as.character(c(45020,45679,46789,43126,42345,47568,45674)),
evaluation = c(30,29,30,NA,25,26,27)
)
exam
exam$evaluation
exam[[6]]
exam <- data.frame(
student_id = factor(as.character(c(45020,45679,46789,43126,42345,47568,45674))),
evaluation_W = c(30,29,30,NA,25,26,17),
evaluation_O = c(28,30,30,NA,28,27,NA),
evaluation_P = c(30,30,30,30,28,28,28),
outcome  = factor(c('Passed','Passed','Passed','To be repeated','Passed','Passed','To be repeated')))
exam
exam$evaluation_W    # a data.frame is a particular kind of list!
exam[[2]]
exam[2,]
evaluation_W
attach(exam)
evaluation_W
detach(exam)
evaluation_W
record <- read.table('record.txt', header=T)
record
head(record)
dim(record)
dimnames(record)
# Transform times in seconds
record[,4:7] <- record[,4:7]*60
record
# to save a data frame (or a matrix)
write.table(record, file = 'record_mod.txt')
# to save several objects in the workspace
W <- matrix(data = c(11,12,13,14,15,16), nrow = 2, ncol = 3, byrow = F)
V <- t(W)
a <- 1
save(W,V,a, file = 'variousobjects.RData')
# to save the entire workspace: save.image('FILENAME.RData')
save.image("myworkspace.RData")
# this command remove all the variable of the workspace
rm(list=ls())
ls()
# to load a workspace (i.e., .RData)
load("variousobjects.RData")
ls()
record <- read.table('record_mod.txt', header=T)
record
# some synthetic indices
colMeans(record)
sapply(record, mean)
setwd("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Labs/Lab1-R-Basics")
record <- read.table('record_mod.txt', header=T)
record
record <- read.table('record.txt', header=T)
record
# some synthetic indices
colMeans(record)
sapply(record, mean)
sapply(record, sd)
sapply(record, var)
cov(record)
cor(record)
##### Descriptive/inferential analysis on the variable m100 ('very basic'!)
attach(record)
# Recall: qqplot to verify (qualitatively) the Gaussian assumption on the
# distribution generating sample
qqnorm(m100) # quantile-quantile plot
qqline(m100, col='red') # theoretical line
# Recall: Shapiro-Wilk test to verify (quantitatively) the Gaussian assumption on the
# distribution generating sample
shapiro.test(m100)
alpha <- .05
sample.mean <- mean(m100)
mean.H0 <- 11.5
sample.sd <- sd(m100)
n     <- length(m100)
tstat <- (sample.mean - mean.H0)/(sample.sd/sqrt(n))
cfr.t <- qt( 1 - alpha/2, n-1 )
abs(tstat) < cfr.t  # cannot reject H0 (accept H0)
pval  <- ifelse(tstat >= 0, (1 - pt(tstat, n-1))*2, pt(tstat, n-1)*2)
pval
?shapiro.test
alpha <- .05
sample.mean <- mean(m100)
mean.H0 <- 11.5
sample.sd <- sd(m100)
n     <- length(m100)
tstat <- (sample.mean - mean.H0)/(sample.sd/sqrt(n))
?qt
cfr.t <- qt( 1 - alpha/2, n-1 )
abs(tstat) < cfr.t  # cannot reject H0 (accept H0)
pval  <- ifelse(tstat >= 0, (1 - pt(tstat, n-1))*2, pt(tstat, n-1)*2)
pval
alpha <- .1
sample.mean <- mean(m100)
mean.H0 <- 11.5
sample.sd <- sd(m100)
n     <- length(m100)
tstat <- (sample.mean - mean.H0)/(sample.sd/sqrt(n))
cfr.t <- qt( 1 - alpha/2, n-1 )
abs(tstat) < cfr.t  # cannot reject H0 (accept H0)
alpha <- .05
sample.mean <- mean(m100)
mean.H0 <- 11.5
sample.sd <- sd(m100)
n     <- length(m100)
tstat <- (sample.mean - mean.H0)/(sample.sd/sqrt(n))
cfr.t <- qt( 1 - alpha/2, n-1 )
abs(tstat) < cfr.t  # cannot reject H0 (accept H0)
pval  <- ifelse(tstat >= 0, (1 - pt(tstat, n-1))*2, pt(tstat, n-1)*2)
pval
IC <- c(inf     = sample.mean - sample.sd/sqrt(n) * qt( 1 - alpha/2, n-1 ),
center  = sample.mean,
sup     = sample.mean + sample.sd/sqrt(n) * qt( 1 - alpha/2, n-1 ))
IC
# automatically
t.test(m100, mu = mean.H0, alternative = 'two.sided', conf.level = 1-alpha)
# More than one plot in a unique device (commands par or layout)
# (command par)
x11()
par(mfrow=c(2,2))
hist(m100,prob=T,main="Histogram records 100m",xlab="sec")
hist(m200,prob=T,main="Histogram records 200m",xlab="sec")
boxplot(record[,1:2],main="Boxplot records 100m e 200m",xlab="sec")
plot(m100,m200, main='Scatter plot records 100m e 200m',xlab="Records 100m",ylab="Records 200m")
dev.off()
# command layout
x11()
x11()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(m100,m200)
hist(m100, prob=T)
hist(m200, prob=T)
# Fit of the linear model (command lm)
# Model: m200=beta0*m100+eps, eps~N(0,sigma^2)
regression <- lm(m200 ~ m100)
regression
summary(regression)
coef(regression)
vcov(regression)
residuals(regression)
fitted(regression)
x11()
# Test F "by hand" (H0: beta0=0 vs H1: beta0!=0)
SSreg <- sum((fitted(regression) - mean(m200))^2)
SSres <- sum(residuals(regression)^2)
SStot <- sum((m200 - mean(m200))^2)
n <- length(m200)
Fstat <- (SSreg/1) / (SSres/(n-2))
P <- 1 - pf(Fstat, 1, n-2)
# Confidence and prediction intervals (command predict)
newdata <- data.frame(m100=c(10,11,12))
pred_nd <- predict(regression, newdata)
pred_nd
IC_nd <- predict(regression, newdata, interval = 'confidence', level = .99)
IC_nd
IP_nd <- predict(regression, newdata, interval = 'prediction', level = .99)
IP_nd
x11()
plot(m100, m200, asp=1,ylim=c(18.5,27.5),cex=0.5)
abline(coef(regression))
points(m100, fitted(regression), col='red', pch=20)
points(c(10,11,12),pred_nd,col='blue',pch=16)
matlines(rbind(c(10,11,12),c(10,11,12)),t(IP_nd[,-1]),type="l",lty=2,col='dark grey',lwd=2)
matpoints(rbind(c(10,11,12),c(10,11,12)),t(IP_nd[,-1]),pch="-",lty=2,col='dark grey',lwd=2,cex=1.5)
matlines(rbind(c(10,11,12),c(10,11,12)),t(IC_nd[,-1]),type="l",lty=1,col='black',lwd=2)
matpoints(rbind(c(10,11,12),c(10,11,12)),t(IC_nd[,-1]),pch="-",lty=1,col='black',lwd=2,cex=1.5)
legend('bottomright',c('Obs.','Fit','Reg. line','Pred. new','IC','IP'),col=c('black','red','black','blue','black','dark grey'),lwd=c(1,1,1,1,2,2),lty=c(-1,-1,1,-1,1,2),pch=c(c(1,19,-1,19,-1,-1)))
title(main='Linear regression (m200 vs m100)')
x11()
par (mfrow=c(2,2))
boxplot(residuals(regression), main='Boxplot of residuals')
qqnorm(residuals(regression))
plot(m100, residuals(regression), main='Residuals vs m100')
abline(h=0, lwd=2)
plot(fitted(regression), residuals(regression), main='Residuals vs fitted m200')
abline(h=0, lwd=2)
record <- read.table('record_mod.txt', header=T)
record
# Scatterplot
x11()
pairs(record)  # or plot(record)
# Boxplot
boxplot(record, col='gold')
boxplot(log(record), col='gold')
# Starplot
x11()
##### Example 2: cerebral aneurysm
aneurysm <- read.table('aneurysm.txt', header=T, sep=',')
head(aneurysm)
dim(aneurysm)
aneurysm.geometry <- aneurysm[,1:4]
aneurysm.position <- factor(aneurysm[,5])
head(aneurysm.geometry)
color.position <- ifelse(aneurysm.position == '1', 'red', 'blue')
attach(aneurysm.geometry)
x11()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(R1,R2, asp=1, col=color.position,pch=16)
hist(R1, prob=T, xlim=c(-10,15))
hist(R2, prob=T, xlim=c(-10,15))
x11()
layout(cbind(c(1,1), c(2,3)), widths=c(2,1), heights=c(1,1))
plot(C1,C2, asp=1, col=color.position,pch=16)
hist(C1, prob=T, xlim=c(-5,5))
hist(C2, prob=T, xlim=c(-5,5))
x11()
par(mfrow = c(1,4))
boxplot(aneurysm.geometry$R1 ~ aneurysm.position, col=c('red','blue'), main='R1')
boxplot(aneurysm.geometry$R2 ~ aneurysm.position, col=c('red','blue'), main='R2')
boxplot(aneurysm.geometry$C1 ~ aneurysm.position, col=c('red','blue'), main='C1')
boxplot(aneurysm.geometry$C2 ~ aneurysm.position, col=c('red','blue'), main='C2')
par(mfrow = c(1,4))
boxplot(aneurysm.geometry$R1 ~ aneurysm.position, col=c('red','blue'), main='R1', ylim=range(aneurysm.geometry))
boxplot(aneurysm.geometry$R2 ~ aneurysm.position, col=c('red','blue'), main='R2', ylim=range(aneurysm.geometry))
boxplot(aneurysm.geometry$C1 ~ aneurysm.position, col=c('red','blue'), main='C1', ylim=range(aneurysm.geometry))
boxplot(aneurysm.geometry$C2 ~ aneurysm.position, col=c('red','blue'), main='C2', ylim=range(aneurysm.geometry))
source('faces.R')
x11()
faces(aneurysm.geometry)
# matplot
matplot(t(aneurysm.geometry),type='l')
matplot(t(aneurysm.geometry),type='l',col=color.position)
x11()
faces(aneurysm.geometry)
district <- c('MI',  'MI',  'VA',  'BG',  'LO', 'LO',  'CR',  'Alt', 'CR',  'MI',
'Alt', 'CR',  'LO',  'VA',  'MI',  'Alt', 'LO',  'MI')
district <- factor(district,levels=c('MI','LO','BG','CR','VA','Alt'))
district
# Pie chart (no ordering of levels)
x11()
x11()
pie(table(district),col=rainbow(length(levels(district))))
library(plotrix)
x11(width = 14)
par(mfrow=c(1,2))
pie3D(table(district)[1:length(levels(district))],labels=levels(district),explode=0.1,
main="Pie Chart of Districts ",col=rainbow(length(levels(district))))
set.seed(180317)
shuffle = sample(1:length(levels(district)), size=length(levels(district)), replace = F)
pie3D(table(district)[shuffle],labels=levels(district)[shuffle],explode=0.1,
main="Pie Chart of Districts ",col=rainbow(length(levels(district)))[shuffle])
install.packages(plottrix)
install.packages("plotrix")
setwd("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/030717")
kimono <- read.csv("C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/030717/kimono.txt", sep="")
View(kimono)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
detach(kimono)
detach(kimono)
detach(kimono)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
detach(kimono)
detach(kimono)
source('~/.active-rstudio-document')
aov
shapiro.test(city)
attach(kimono)
shapiro.test(city)
shapiro.test(value[ feed==city[1] ])
shapiro.test(value[ city==city[2] ])
shapiro.test(value[ city==city[1] ])
shapiro.test(value[ city==city[2] ])
shapiro.test(value[ city==city[1] ])
shapiro.test(value[ type==city[2] ])
shapiro.test(value[ type==type[1] ])
shapiro.test(value[ type==type[2] ])
shapiro.test(value[ type==type[1] ])
shapiro.test(value[ type==type[2] ])
var(value[ city==city[1] ])
var(value[ city==city[2] ])
var(value[ type==type[1] ])
var(value[ type==type[2] ])
bartlett.test(value, city)
bartlett.test(value, type)
bartlett.test(lm(value ~ city + type + city:type))
bartlett.test(value, city)
?bartlett.test
aov <- anova(lm(value ~ city + type + city:type))
summary(aov)
aov
shapiro.test
?shapiro.test
shapiro.test(value[ city==city[1] ])
shapiro.test(value[ city==city[2] ])
shapiro.test(value[ type==type[1] ])
shapiro.test(value[ type==type[2] ])
shapiro.test(value[ type==type[3] ])
shapiro.test(value[ type==type[4] ])
type[4]
type[2]
type[100]
city[1]
city[2]
type[500]
shapiro.test(value[ type==type[500] ])
shapiro.test(value[ type==type[4] ])
var(value[ type==type[500] ])
var(value[ type==type[1] ])
aov
### Modello ridotto
aov_r <- anova(lm(value ~ city))
aov_r
### Modello ridotto
aov_r <- anova(lm(value ~ type))
aov_r
Mtype      <- tapply(df$value, df$city, mean)
Mtype      <- tapply(df$value, as.factor(df$city), mean)
Mtype      <- tapply(kimono$value, as.factor(kimono$city), mean)
mean_type <- tapply(kimono$value, kimono$city, mean)
city.levels
shapiro.test(value[ type==levels(type)[1] ])
shapiro.test(value[ type==levels(type)[2] ])
n       <- length(treat)      # total number of obs.
n       <- length(type)      # total number of obs.
ng      <- table(type)       # number of obs. in each group
g       <- length(levels(type))
SSres <- sum(residuals(aov)^2)
S <- SSres/(n-g)
SSres
SSres <- sum(residuals(aov_r)^2)
S <- SSres/(n-g)
aov_all <- aov(lm(value ~ city + type + city:type))
aov_all
### Modello ridotto
aov_r <- aov(lm(value ~ type))
summary(aov_r)
mean_type <- tapply(kimono$value, kimono$treat, mean)
mean_type <- tapply(kimono$value, kimono$type, mean)
n       <- length(type)      # total number of obs.
ng      <- table(type)       # number of obs. in each group
g       <- length(levels(type))
k <- g*(g-1)/2
alpha= 0.05
SSres <- sum(residuals(aov_r)^2)
S <- SSres/(n-g)
paste(levels(type)[1],"-",levels(type)[2])
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] ))))
source('C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/030717/genalti/ese1.R')
IC <- c(diff(Mtype) - qt(0.975, (n*g-1)*b) * sqrt(SSres/((n*g-1)*b) *(1/(n*g) + 1/(n*g))),
diff(Mtype) + qt(0.975, (n*g-1)*b) * sqrt(SSres/((n*g-1)*b) *(1/(n*g) + 1/(n*g))))
names(IC) <- c('Inf', 'Sup')
IC    # IC for mu(ready-to-use)-mu(hand-made)
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] ))))
### Modello ridotto
aov_r <- aov(lm(value ~ type + city:type))
summary(aov_r)
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] ))))
IC <- c(diff(Mtype) - qt(0.975, (n*g-1)*b) * sqrt(SSres/((n*g-1)*b) *(1/(n*g) + 1/(n*g))),
diff(Mtype) + qt(0.975, (n*g-1)*b) * sqrt(SSres/((n*g-1)*b) *(1/(n*g) + 1/(n*g))))
names(IC) <- c('Inf', 'Sup')
IC    # IC for mu(ready-to-use)-mu(hand-made)
alpha= 0.025
SSres <- sum(residuals(aov_r)^2)
S <- SSres/(n-g)
paste(levels(type)[1],"-",levels(type)[2])
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] ))))
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n)))
### [b=2, thus one interval only]
IC <- c(diff(Mtype) - qt(0.975, (n*g-1)*b) * sqrt(SSres/((n*g-1)*b) *(1/(n*g) + 1/(n*g))),
diff(Mtype) + qt(0.975, (n*g-1)*b) * sqrt(SSres/((n*g-1)*b) *(1/(n*g) + 1/(n*g))))
names(IC) <- c('Inf', 'Sup')
IC
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n)))
alpha= 0.025
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n)))
alpha= 0.025
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n)))
alpha= 0.05
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n)))
as.numeric(diff(mean_type)-qt(1-alpha,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2]))
qt(1-alpha,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2])
diff(mean_type)
as.numeric(mean_type[1]-mean_type[2]-qt(1-alpha,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2]))
as.numeric(c(mean_type[1]-mean_type[2]-qt(1-alpha,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2]),mean_type[1]-mean_type[2]+qt(1-alpha,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2])))
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2] )/n)))
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2]))),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2])))
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2]))),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2])))
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2]))),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2]))))
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2])),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2]))))
as.numeric(c(mean_type[1]-mean_type[2]-qt(1-alpha,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2]),mean_type[1]-mean_type[2]+qt(1-alpha,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2])))
S <- SSres/(n-g)
as.numeric(c(mean_type[1]-mean_type[2]-qt(1-alpha/2,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2]),mean_type[1]-mean_type[2]+qt(1-alpha,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2])))
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2])),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2]))))
as.numeric(c(mean_type[1]-mean_type[2]-qt(1-alpha/2,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2]),mean_type[1]-mean_type[2]+qt(1-alpha/2,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2])))
as.numeric(c(mean_type[1]-mean_type[2]-qt(1-alpha/2,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2]),mean_type[1]-mean_type[2]+qt(1-alpha/2,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2])))
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2])),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2]))))
### Interval at 95% for the differences (reduced additive model)
### [b=2, thus one interval only]
IC <- c(diff(Mtype) - qt(0.975, (n*g-1)*b) * sqrt(SSres/((n*g-1)*b) *(1/(n*g) + 1/(n*g))),
diff(Mtype) + qt(0.975, (n*g-1)*b) * sqrt(SSres/((n*g-1)*b) *(1/(n*g) + 1/(n*g))))
IC    # IC for mu(ready-to-use)-mu(hand-made)
as.numeric(c(mean_type[1]-mean_type[2] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2])),
mean_type[1]-mean_type[2] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[1] + 1/ng[2]))))
as.numeric(c(mean_type[1]-mean_type[2]-qt(1-alpha/2,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2]),
mean_type[1]-mean_type[2]+qt(1-alpha/2,df=pmin(ng[1],ng[2])-1)*sqrt(var(value[ type==levels(type)[1] ])/ng[1]+var(value[ type==levels(type)[2] ])/ng[2])))
source('C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/030717/fedeli/es2.R')
View(bento)
shapiro.test(bento$rice_hanami)
shapiro.test(bento$rice_nohanami)
source('C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/030717/fedeli/es2.R')
install.pakages("mvtnorm")
install.packages("mvtnorm")
install.packages("mvtnorm")
install.packages("mvtnorm")
source('C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/030717/fedeli/es2.R')
?rep
source('C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Old exams (in English)/030717/fedeli/es2.R')
mcshapiro.test <- function (X, devstmax = 0.01, sim = ceiling(1/(4 * devstmax^2)))
{
library(mvtnorm)
library(mvnormtest)
n <- dim(X)[1]
p <- dim(X)[2]
mu <- rep(0, p)
sig <- diag(p)
W <- NULL
for (i in 1:sim) {
Xsim <- rmvnorm(n, mu, sig)
W <- c(W, mshapiro.test(t(Xsim))$stat)
}
Wmin <- mshapiro.test(t(X))$stat
pvalue <- sum(W < Wmin)/sim
devst <- sqrt(pvalue * (1 - pvalue)/sim)
list(Wmin = as.vector(Wmin), pvalue = pvalue, devst = devst,
sim = sim)
}
mcshapiro.test(bento[,c(1,5)])
mcshapiro.test(bento[,c(2,6)])
mcshapiro.test(bento[,c(3,7)])
mcshapiro.test(bento[,c(4,8)])
source('C:/Users/ffede/OneDrive/Desktop/AppliedStatTDE/Labs/Lab6-Paired-Gaussian/LAB_6.R')
effluent <- read.table('effluent.dat')
effluent
mcshapiro.test(bento[,c(1,5)])
shapiro.test(bento[1])
shapiro.test(bento[,1])
shapiro.test(bento[,2])
shapiro.test(bento[,3])
shapiro.test(bento[,4])
shapiro.test(bento[,5])
shapiro.test(bento[,6])
shapiro.test(bento[,7])
shapiro.test(bento[,8])
mcshapiro.test(bento)
