z  <- predict(qda.iris, xy)$post
z1 <- z[,1] - z[,2]
x11()
plot(iris2, main='Iris Sepal', xlab='Sepal.Length', ylab='Sepal.Width', pch=20)
points(iris2[i1,], col='red', pch=20)
points(iris2[i2,], col='green', pch=20)
points(qda.iris$means, col=c('red','green','blue'), pch=4, lwd=2, cex=1.5)
x  <- seq(min(data[,1]), max(data[,1]), length=200)
y  <- seq(min(data[,2]), max(data[,2]), length=200)
xy <- expand.grid(water=x, sailing.time=y)
z  <- predict(qda.iris, xy)$post
z1 <- z[,1] - z[,2]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
qda.iris <- qda(iris2, species.name, prior = prior)
qda.iris
Qda.iris <- predict(qda.iris, iris2)
#Qda.iris
# compute the APER
miscQDA <- table(classe.vera=species.name, classe.allocata=Qda.iris$class)
APERQDA <- 0
G <- 2
for(g in 1:G)
APERQDA <- APERQDA + sum(miscQDA[g,-g])/sum(miscQDA[g,]) * prior[g]
# Compute the estimate of the AER by cross-validation
QdaCV.iris <- qda(iris2, species.name, CV=TRUE, prior = prior)  # specify the argument CV
miscQDACV <- table(classe.vera=species.name, classe.allocata=QdaCV.iris$class)
APERQDACV <- 0
G <- 2
for(g in 1:G)
APERQDACV <- APERQDACV + sum(miscQDACV[g,-g])/sum(miscQDACV[g,]) * prior[g]
# Plot the partition induced by QDA
x11()
plot(iris2, main='Iris Sepal', xlab='Sepal.Length', ylab='Sepal.Width', pch=20)
points(iris2[i1,], col='red', pch=20)
points(iris2[i2,], col='green', pch=20)
points(qda.iris$means, col=c('red','green','blue'), pch=4, lwd=2, cex=1.5)
x  <- seq(min(data[,1]), max(data[,1]), length=200)
y  <- seq(min(data[,2]), max(data[,2]), length=200)
xy <- expand.grid(water=x, sailing.time=y)
z  <- predict(qda.iris, xy)$post
z1 <- z[,1] - z[,2]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
LdaCV.iris <- lda(iris2, species.name, prior = prior, CV=TRUE)  # specify the argument CV
miscCV <- table(classe.vera=species.name, classe.allocata=LdaCV.iris$class)
APERCV <- 0
G <- 2
for(g in 1:G)
APERCV <- APERCV + sum(miscCV[g,-g])/sum(miscCV[g,]) * prior[g]
LdaCV.iris <- lda(iris2, species.name, prior = prior, CV=TRUE)  # specify the argument CV
miscCV <- table(classe.vera=species.name, classe.allocata=LdaCV.iris$class)
APERCV <- 0
G <- 2
for(g in 1:G)
APERCV <- APERCV + sum(miscCV[g,-g])/sum(miscCV[g,]) * prior[g]
miscCV
misc
rm(list = ls())
data <- read.table("Sailing.txt")
library(MASS)
attach(data)
species.name <- factor(type, labels=c('seadog','vacationer'))
g=2
i1 <- which(species.name=='seadog')
i2 <- which(species.name=='vacationer')
n1 <- length(i1)
n2 <- length(i2)
n <- n1+n2
detach(data)
iris2 <- data[,1:2]
m <-  colMeans(iris2)
m1 <- colMeans(iris2[i1,])
m2 <- colMeans(iris2[i2,])
S1 <- cov(iris2[i1,])
S2 <- cov(iris2[i2,])
# Sp  <- ((n1-1)*S1+(n2-1)*S2+(n3-1)*S3)/(n-g)
# One-way MANOVA (See LAB 8)
fit <- manova(as.matrix(iris2) ~ species.name)
summary.manova(fit,test="Wilks")
prior = c(0.2,0.8)
# Linear Discriminant Analysis (LDA)
lda.iris <- lda(iris2, species.name, prior = prior)
lda.iris
Lda.iris <- predict(lda.iris, iris2)
# Compute the APER (apparent error rate)
misc <- table(classe.vera=species.name, classe.allocata=Lda.iris$class)
APER <- 0
G <- 2
for(g in 1:G)
APER <- APER + sum(misc[g,-g])/sum(misc[g,]) * prior[g]
# Compute the estimate of the AER by cross-validation
LdaCV.iris <- lda(iris2, species.name, prior = prior, CV=TRUE)  # specify the argument CV
miscCV <- table(classe.vera=species.name, classe.allocata=LdaCV.iris$class)
APERCV <- 0
G <- 2
for(g in 1:G)
APERCV <- APERCV + sum(miscCV[g,-g])/sum(miscCV[g,]) * prior[g]
# Plot the partition induced by LDA
x11()
plot(iris2, pch=20)
points(iris2[i1,], col='red', pch=20)
points(iris2[i2,], col='green', pch=20)
points(lda.iris$means, pch=4,col=c('red','green','blue') , lwd=2, cex=1.5) # centri
x  <- seq(min(data[,1]), max(data[,1]), length=200)
y  <- seq(min(data[,2]), max(data[,2]), length=200)
xy <- expand.grid(water=x, sailing.time=y)
z  <- predict(lda.iris, xy)$post  # these are P_i*f_i(x,y)
z1 <- z[,1] - pmax(z[,2])  # P_1*f_1(x,y)-max{P_j*f_j(x,y)}
# Plot the contour line of level (levels=0) of z1, z2, z3:
# P_i*f_i(x,y)-max{P_j*f_j(x,y)}=0 i.e., boundary between R.i and R.j
# where j realizes the max.
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
### Quadratic Discriminand Analysis (QDA)
###---------------------------------------
qda.iris <- qda(iris2, species.name, prior = prior)
qda.iris
Qda.iris <- predict(qda.iris, iris2)
#Qda.iris
# compute the APER
miscQDA <- table(classe.vera=species.name, classe.allocata=Qda.iris$class)
APERQDA <- 0
G <- 2
for(g in 1:G)
APERQDA <- APERQDA + sum(miscQDA[g,-g])/sum(miscQDA[g,]) * prior[g]
# Compute the estimate of the AER by cross-validation
QdaCV.iris <- qda(iris2, species.name, CV=TRUE, prior = prior)  # specify the argument CV
miscQDACV <- table(classe.vera=species.name, classe.allocata=QdaCV.iris$class)
APERQDACV <- 0
G <- 2
for(g in 1:G)
APERQDACV <- APERQDACV + sum(miscQDACV[g,-g])/sum(miscQDACV[g,]) * prior[g]
# Plot the partition induced by QDA
x11()
plot(iris2, main='Iris Sepal', xlab='Sepal.Length', ylab='Sepal.Width', pch=20)
points(iris2[i1,], col='red', pch=20)
points(iris2[i2,], col='green', pch=20)
points(qda.iris$means, col=c('red','green','blue'), pch=4, lwd=2, cex=1.5)
x  <- seq(min(data[,1]), max(data[,1]), length=200)
y  <- seq(min(data[,2]), max(data[,2]), length=200)
xy <- expand.grid(water=x, sailing.time=y)
z  <- predict(qda.iris, xy)$post
z1 <- z[,1] - z[,2]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
rm(list = ls())
data <- read.table("Sailing.txt")
library(MASS)
attach(data)
species.name <- factor(type, labels=c('seadog','vacationer'))
g=2
i1 <- which(species.name=='seadog')
i2 <- which(species.name=='vacationer')
n1 <- length(i1)
n2 <- length(i2)
n <- n1+n2
detach(data)
iris2 <- data[,1:2]
m <-  colMeans(iris2)
m1 <- colMeans(iris2[i1,])
m2 <- colMeans(iris2[i2,])
S1 <- cov(iris2[i1,])
S2 <- cov(iris2[i2,])
# Sp  <- ((n1-1)*S1+(n2-1)*S2+(n3-1)*S3)/(n-g)
# One-way MANOVA (See LAB 8)
fit <- manova(as.matrix(iris2) ~ species.name)
summary.manova(fit,test="Wilks")
prior = c(0.2,0.8)
# Linear Discriminant Analysis (LDA)
lda.iris <- lda(iris2, species.name, prior = prior)
lda.iris
Lda.iris <- predict(lda.iris, iris2)
# Compute the APER (apparent error rate)
misc <- table(classe.vera=species.name, classe.allocata=Lda.iris$class)
APER <- 0
G <- 2
for(g in 1:G)
APER <- APER + sum(misc[g,-g])/sum(misc[g,]) * prior[g]
# Compute the estimate of the AER by cross-validation
LdaCV.iris <- lda(iris2, species.name, prior = prior, CV=TRUE)  # specify the argument CV
miscCV <- table(classe.vera=species.name, classe.allocata=LdaCV.iris$class)
APERCV <- 0
G <- 2
for(g in 1:G)
APERCV <- APERCV + sum(miscCV[g,-g])/sum(miscCV[g,]) * prior[g]
# Plot the partition induced by LDA
x11()
plot(iris2, pch=20)
points(iris2[i1,], col='red', pch=20)
points(iris2[i2,], col='green', pch=20)
points(lda.iris$means, pch=4,col=c('red','green','blue') , lwd=2, cex=1.5) # centri
x  <- seq(min(data[,1]), max(data[,1]), length=200)
y  <- seq(min(data[,2]), max(data[,2]), length=200)
xy <- expand.grid(water=x, sailing.time=y)
z  <- predict(lda.iris, xy)$post  # these are P_i*f_i(x,y)
z1 <- z[,1] - pmax(z[,2])  # P_1*f_1(x,y)-max{P_j*f_j(x,y)}
# Plot the contour line of level (levels=0) of z1, z2, z3:
# P_i*f_i(x,y)-max{P_j*f_j(x,y)}=0 i.e., boundary between R.i and R.j
# where j realizes the max.
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
### Quadratic Discriminand Analysis (QDA)
###---------------------------------------
qda.iris <- qda(iris2, species.name, prior = prior)
qda.iris
Qda.iris <- predict(qda.iris, iris2)
#Qda.iris
# compute the APER
miscQDA <- table(classe.vera=species.name, classe.allocata=Qda.iris$class)
APERQDA <- 0
G <- 2
for(g in 1:G)
APERQDA <- APERQDA + sum(miscQDA[g,-g])/sum(miscQDA[g,]) * prior[g]
# Compute the estimate of the AER by cross-validation
QdaCV.iris <- qda(iris2, species.name, CV=TRUE, prior = prior)  # specify the argument CV
miscQDACV <- table(classe.vera=species.name, classe.allocata=QdaCV.iris$class)
APERQDACV <- 0
G <- 2
for(g in 1:G)
APERQDACV <- APERQDACV + sum(miscQDACV[g,-g])/sum(miscQDACV[g,]) * prior[g]
# Plot the partition induced by QDA
x11()
plot(iris2, pch=20)
points(iris2[i1,], col='red', pch=20)
points(iris2[i2,], col='green', pch=20)
points(qda.iris$means, col=c('red','green','blue'), pch=4, lwd=2, cex=1.5)
x  <- seq(min(data[,1]), max(data[,1]), length=200)
y  <- seq(min(data[,2]), max(data[,2]), length=200)
xy <- expand.grid(water=x, sailing.time=y)
z  <- predict(qda.iris, xy)$post
z1 <- z[,1] - z[,2]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
names(lda.iris)
names(Lda.iris)
names(Lda.iris)$posterio
names(Lda.iris)$posterior
Lda.iris$posterior[1]
Lda.iris$posterior[1]
Qda.iris$posterior[1]
Lda.iris$posterior
Lda.iris$posterior[1,]
Qda.iris$posterior[1,]
load("mcshapiro.test.RData")
mcshapiro.test(iris2[i1,])
mcshapiro.test(iris2[i2,])
cov(iris2[i1,])
cov(iris2[i2,])
newdata <- data.frame(water = 35, sailing.time = 168)
predict(qda.iris, newdata)$post
View(newdata)
rm(list = ls())
data = read.table("Lumieres.txt")
head(data)
data$rain = as.factor(data$rain)
View(data)
rm <- lm(N.people ~ rain + day + I(day^2) + temperature,data = data)
summary(rm)
library(car)
linearHypothesis(rm, rbind(c(0,0,1,0,0), c(0,0,0,1,0)), c(0,0))
linearHypothesis(rm, rbind(c(0,1,0,0,0), c(0,0,0,0,1)), c(0,0))
rmr <- lm(N.people ~ day + I(day^2),data = data)
summary(rmr)
# d)
A <- c(0,1,2*61,0)
b <- 0
linearHypothesis(rmr,A,b)
# d)
A <- c(0,1,2*61)
b <- 0
linearHypothesis(rmr,A,b)
rm1 <- lm(N.people ~ I(day^2 - 122*day),data = data)
summary(rm1)
newdata <- data.frame(day = 58, temperature = 29, rain = no)
newdata <- data.frame(day = 58, temperature = 29, rain = as.factor(no))
newdata <- data.frame(day = 58, temperature = 29, rain = as.factor("no"))
predict(newdata, rm1, interval = "prediction", level = 0.95)
help(predict)
predict.lm(rm1, newdata, interval = "prediction", level = 0.95)
predict(rm1, newdata, interval = "prediction", level = 0.95)
rm(list = ls())
data = read.table("IAMG.txt")
rm(list = ls())
data = read.table("IAMG.txt")
head(data)
load("mcshapiro.test.RData")
mcshapiro.test(data)
m <- sapply(data, mean)
Sigma <- cov(data)
eigen(Sigma)
# Direction of the axes:
eigen(Sigma)$vectors
r <- sqrt(qchisq(0.95,3))
r
# Length of the semi-axes:
r*sqrt(eigen(Sigma)$values)
r <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
n <- dim(data)
r <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
p <- dim(data)[2]
r <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
alpha <- 0.05
r <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
# Length of the semi-axes:
r*sqrt(eigen(Sigma)$values)
qf(1-alpha,p,n-p)
# Length of the semi-axes:
r*sqrt(eigen(Sigma)$values)
qf(1-alpha,p,n-p)
help(qf)
n <- dim(data)[1]
r <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
# Length of the semi-axes:
r*sqrt(eigen(Sigma)$values)
ellipse(m, Sigma/n, sqrt(r), col = 'red', lty = 2, lwd=2, center.cex=1)
ellipse3d(m, Sigma/n, sqrt(r), col = 'red', lty = 2, lwd=2, center.cex=1)
library(rgl)
open3d()
ellipse3d(m, Sigma/n, sqrt(r), col = 'red', lty = 2, lwd=2, center.cex=1)
# Length of the semi-axes:
r*sqrt(eigen(Sigma)$values)
# Length of the semi-axes:
sqrt(r*eigen(Sigma)$values)
# Length of the semi-axes:
sqrt(r*eigen(Sigma)$values)
# Length of the semi-axes:
sqrt(r*eigen(Sigma)$values)
# Length of the semi-axes:
sqrt(r*eigen(Sigma)$values)
View(Sigma)
ellipse(m[,1:2], Sigma[1:2,1:2]/n, sqrt(r), col = 'red', lty = 2, lwd=2, center.cex=1)
ellipse(m[1:2], Sigma[1:2,1:2]/n, sqrt(r), col = 'red', lty = 2, lwd=2, center.cex=1)
x11()
ellipse(m[1:2], Sigma[1:2,1:2]/n, sqrt(r), col = 'red', lty = 2, lwd=2, center.cex=1)
cfr.fisher <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
# Length of the semi-axes of the ellipse:
r <- sqrt(cfr.fisher)
r*sqrt(eigen(x.cov/n)$values)
r*sqrt(eigen(Sigma/n)$values)
# Direction of the axes:
eigen(Sigma)$vectors
c1 <- m[1]
l1 <- m[1]-sqrt(cfr.fisher*Sigma[1,1]/n)
r1 <- m[1]+sqrt(cfr.fisher*Sigma[1,1]/n)
c2 <- m[2]
l2 <- m[2]-sqrt(cfr.fisher*Sigma[2,2]/n)
r2 <- m[2]+sqrt(cfr.fisher*Sigma[2,2]/n)
c3 <- m[3]
l3 <- m[3]-sqrt(cfr.fisher*Sigma[3,3]/n)
r3 <- m[3]+sqrt(cfr.fisher*Sigma[3,3]/n)
T2 <- cbind(inf = c(l1,l2,l3), center = c(c1,c2,c3), sup = c(r1,r2,r3))
T2
# c)
data$perc <- data$No.show/data$Registered
# c)
data$perc <- 1-data$No.show/data$Registered
View(data)
m4 <- mean(data$perc)
help("t.test")
t.test(data$perc, alternative = "two-sided", mu = 0.9)
t.test(data$perc, alternative = "two.sided", mu = 0.9)
t.test(0.1*data$Registered - data$No.show, alternative = "two.sided", mu = 0)
# c)
t.test(0.1*data$Registered - data$No.show, alternative = "two.sided", mu = 0)
rm(list = ls())
data = read.table("Waiting.txt")
head(data)
View(data)
fit.aov2.int <- aov(waiting ~ course + city + course:city, data = data)
summary.aov(fit.aov2.int)
fit.aov1 <- aov(waiting ~ course)
summary.aov(fit.aov1)
fit.aov1 <- aov(waiting ~ course, data = data)
summary.aov(fit.aov1)
summary(data)
Ps <- c(shapiro.test(waiting[course == "Dessert" & city=="Bucarest"])$p,
shapiro.test(waiting[course == "Main" & city=="Bucarest"])$p,
shapiro.test(waiting[course == "Starter" & city=="Bucarest"])$p,
shapiro.test(waiting[course == "Dessert" & city=="Iasi"])$p,
shapiro.test(waiting[course == "Main" & city=="Iasi"])$p,
shapiro.test(waiting[course == "Starter" & city=="Iasi"])$p)
attach(data)
Ps <- c(shapiro.test(waiting[course == "Dessert" & city=="Bucarest"])$p,
shapiro.test(waiting[course == "Main" & city=="Bucarest"])$p,
shapiro.test(waiting[course == "Starter" & city=="Bucarest"])$p,
shapiro.test(waiting[course == "Dessert" & city=="Iasi"])$p,
shapiro.test(waiting[course == "Main" & city=="Iasi"])$p,
shapiro.test(waiting[course == "Starter" & city=="Iasi"])$p)
Ps
Pb <- c(bartlett.test(waiting[course == "Dessert" & city=="Bucarest"])$p,
bartlett.test(waiting[course == "Main" & city=="Bucarest"])$p,
bartlett.test(waiting[course == "Starter" & city=="Bucarest"])$p,
bartlett.test(waiting[course == "Dessert" & city=="Iasi"])$p,
bartlett.test(waiting[course == "Main" & city=="Iasi"])$p,
bartlett.test(waiting[course == "Starter" & city=="Iasi"])$p)
bartlett.test(waiting ~ course:city)
course:city
bartlett.test(waiting ~ levels(course:city))
levels(course:city)
bartlett.test(waiting,course:city)
detach(data)
fit.aov1 <- aov(waiting ~ course, data = data)
summary.aov(fit.aov1)
fit.aov1 <- aov(waiting ~ course + city, data = data)
summary.aov(fit.aov1)
fit.aov1 <- aov(waiting ~ course, data = data)
summary.aov(fit.aov1)
boxplot(waiting ~ course)
boxplot(waiting ~ course, data=data)
boxplot(waiting ~ city, data=data)
boxplot(waiting ~ city:course, data=data)
# c)
g <- 3
k <- g*(g-1)/2
alpha=.05
attach(data)
Media   <- mean(waiting)
Mediag  <- tapply(waiting, course, mean)
SSres <- sum(residuals(fit.aov2.int)^2)
S <- SSres/(n-g)
# c)
n <- dim(data)[1]
# CI for all the differences
ICrange=NULL
for(i in 1:(g-1)) {
for(j in (i+1):g) {
print(paste(treat[i],"-",treat[j]))
print(as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
ICrange=rbind(ICrange,as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
}
}
detach(data)
attach(data)
treat <- levels(course)
for(i in 1:(g-1)) {
for(j in (i+1):g) {
print(paste(treat[i],"-",treat[j]))
print(as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
ICrange=rbind(ICrange,as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
}
}
ng <- table(course)
for(i in 1:(g-1)) {
for(j in (i+1):g) {
print(paste(treat[i],"-",treat[j]))
print(as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
ICrange=rbind(ICrange,as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
}
}
S
S <- SSres/(n-g)
# CI for all the differences
ICrange=NULL
for(i in 1:(g-1)) {
for(j in (i+1):g) {
print(paste(treat[i],"-",treat[j]))
print(as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
ICrange=rbind(ICrange,as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
}
}
k <- 4
# CI for all the differences
ICrange=NULL
for(i in 1:(g-1)) {
for(j in (i+1):g) {
print(paste(treat[i],"-",treat[j]))
print(as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
ICrange=rbind(ICrange,as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
}
}
View(ICrange)
DF <- fit.aov2.int$df # n*g*b - 1 - (g-1) = 15*3*2-1-2 = 90-3 = 87
Spooled <- sum(fit.aov2.int$res^2)/DF
c(Spooled * DF / qchisq(1 - alpha / (2*k), DF),
Spooled * DF / qchisq(alpha / (2*k), DF))
detach(data)
View(fit.aov2.int)
DF <- fit.aov1$df # n*g*b - 1 - (g-1)
Spooled <- sum(fit.aov1$res^2)/DF
c(Spooled * DF / qchisq(1 - alpha / (2*k), DF),
Spooled * DF / qchisq(alpha / (2*k), DF))
for(i in 1:(g-1)) {
for(j in (i+1):g) {
print(paste(treat[i],"-",treat[j]))
print(as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
ICrange=rbind(ICrange,as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
}
}
SSres <- sum(residuals(fit.aov1)^2)
S <- SSres/(n-g)
# CI for all the differences
ICrange=NULL
for(i in 1:(g-1)) {
for(j in (i+1):g) {
print(paste(treat[i],"-",treat[j]))
print(as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
ICrange=rbind(ICrange,as.numeric(c(Mediag[i]-Mediag[j] - qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )),
Mediag[i]-Mediag[j] + qt(1-alpha/(2*k), n-g) * sqrt( S * ( 1/ng[i] + 1/ng[j] )))))
}
}
1/30
Mediag
n-g
detach(data)
