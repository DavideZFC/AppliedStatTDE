set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
x1 <- df[1:10,1]
x2 <- df[11:15,1]
x_pooled <- df[,1]
T0 <- median(x1) - median(x2)
T0
B <- 10000
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- median(x1_perm) - median(x2_perm)
}
# Permutational distribution of T
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=50)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat))
abline(v=T0,col=3,lwd=2)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val
df <- read.table("stress.txt")
head(df)
tail(df)
set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
x1 <- df[1:10,1]
x2 <- df[11:15,1]
x_pooled <- df[,1]
T0 <- median(x1) - median(x2)
T0
B <- 10000
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- median(x1_perm) - median(x2_perm)
}
# Permutational distribution of T
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=50)
abline(v=T0,col=3,lwd=2)
df <- read.table("stress.txt")
head(df)
tail(df)
set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
x1 <- df[1:10,1]
x2 <- df[11:15,1]
x_pooled <- df[,1]
T0 <- median(x1) - median(x2)
T0
B <- 10000
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- median(x1_perm) - median(x2_perm)
}
# Permutational distribution of T
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=5)
abline(v=T0,col=3,lwd=2)
df <- read.table("stress.txt")
head(df)
tail(df)
set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
x1 <- df[1:10,1]
x2 <- df[11:15,1]
x_pooled <- df[,1]
T0 <- median(x1) - median(x2)
T0
B <- 10000
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- median(x1_perm) - median(x2_perm)
}
# Permutational distribution of T
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=10)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat))
abline(v=T0,col=3,lwd=2)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val
df <- read.table("stress.txt")
head(df)
tail(df)
set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
for(i in 1:8){
x1 <- df[1:10,i]
x2 <- df[11:15,i]
x_pooled <- df[,i]
T0 <- median(x1) - median(x2)
T0
B <- 10000
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- median(x1_perm) - median(x2_perm)
}
# Permutational distribution of T
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=10)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat))
abline(v=T0,col=3,lwd=2)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val
}
df <- read.table("stress.txt")
head(df)
tail(df)
set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
p_val <- rep(NA,8)
stat <- rep(NA,8)
for(i in 1:8){
x1 <- df[1:10,i]
x2 <- df[11:15,i]
x_pooled <- df[,i]
T0 <- median(x1) - median(x2)
T0
B <- 10000
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- median(x1_perm) - median(x2_perm)
}
# Permutational distribution of T
#hist(T_stat,xlim=range(c(T_stat,T0)),breaks=10)
#abline(v=T0,col=3,lwd=2)
#plot(ecdf(T_stat))
#abline(v=T0,col=3,lwd=2)
# p-value
p_val[i] <- sum(T_stat>=T0)/B
stat[i] <- mean(T_stat)
}
p_val
stat
T0
df <- read.table("stress.txt")
head(df)
tail(df)
set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
p_val <- rep(NA,8)
stat <- rep(NA,8)
Tzero <- rep(NA,8)
for(i in 1:8){
x1 <- df[1:10,i]
x2 <- df[11:15,i]
x_pooled <- df[,i]
T0 <- median(x1) - median(x2)
T0
B <- 10000
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- median(x1_perm) - median(x2_perm)
}
# Permutational distribution of T
#hist(T_stat,xlim=range(c(T_stat,T0)),breaks=10)
#abline(v=T0,col=3,lwd=2)
#plot(ecdf(T_stat))
#abline(v=T0,col=3,lwd=2)
# p-value
p_val[i] <- sum(T_stat>=T0)/B
stat[i] <- mean(T_stat)
Tzero[i] <- T0
}
p_val
stat
Tzero
df <- read.table("stress.txt")
head(df)
tail(df)
set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
p_val <- rep(NA,8)
stat <- rep(NA,8)
Tzero <- rep(NA,8)
for(i in 1:8){
x1 <- df[1:10,i]
x2 <- df[11:15,i]
x_pooled <- df[,i]
T0 <- abs(median(x1) - median(x2))
T0
B <- 10000
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- abs(median(x1_perm) - median(x2_perm))
}
# Permutational distribution of T
#hist(T_stat,xlim=range(c(T_stat,T0)),breaks=10)
#abline(v=T0,col=3,lwd=2)
#plot(ecdf(T_stat))
#abline(v=T0,col=3,lwd=2)
# p-value
p_val[i] <- sum(T_stat>=T0)/B
stat[i] <- mean(T_stat)
Tzero[i] <- T0
}
p_val
stat
Tzero
matplot(df)
df <- read.table("mickey.txt")
df <- read.table("mickey.txt")
head(df)
df <- read.table("stress.txt")
head(df)
tail(df)
set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
B <- 10000
p_val <- rep(NA,8)
stat <- rep(NA,8)
Tzero <- rep(NA,8)
for(i in 1:8){
x1 <- df[1:10,i]
x2 <- df[11:15,i]
x_pooled <- df[,i]
T0 <- median(x1) - median(x2)
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- median(x1_perm) - median(x2_perm)
}
# Permutational distribution of T
#hist(T_stat,xlim=range(c(T_stat,T0)),breaks=10)
#abline(v=T0,col=3,lwd=2)
#plot(ecdf(T_stat))
#abline(v=T0,col=3,lwd=2)
# p-value
p_val[i] <- sum(T_stat>=T0)/B
stat[i] <- mean(T_stat)
Tzero[i] <- T0
}
p_val
stat
Tzero
1 - p_val
help(p.adjust)
p.adjust(p_val[i], 'bonferroni')
1 - p_val
p.adjust(p_val[4], 'bonferroni')
p.adjust(p_val[4], 'fdr')
p.adjust(1- p_val[4], 'fdr')
p.adjust(1- p_val[4], 'bonferroni')
p.adjust(p_val, 'bonferroni', n = 8)
p_adj <- p.adjust(p_val, 'bonferroni', n = 8)
1 - p_adj
1 - p_val
1 - p_adj
p_adj <- p.adjust(1 - p_val, 'bonferroni', n = 8)
p_adj
p_adj <- p.adjust(1 - p_val, 'holm', n = 8)
p_adj
p_adj <- p.adjust(1 - p_val, 'fdr', n = 8)
p_adj
p_adj <- p.adjust(p_val, 'fdr', n = 8)
p_adj
1-p_adj
p_val
p_adj <- p.adjust(p_val, 'fdr', n = 8)
p_adj
p_adj <- p.adjust(1 - p_val, 'fdr', n = 8)
p_adj
df <- read.table("stress.txt")
head(df)
tail(df)
set.seed(123)
n1 <- 10
n2 <- 5
n <- n1+n2
B <- 10000
p_val <- rep(NA,8)
stat <- rep(NA,8)
Tzero <- rep(NA,8)
for(i in 1:8){
x1 <- df[1:10,i]
x2 <- df[11:15,i]
x_pooled <- df[,i]
T0 <- median(x1) - median(x2)
T_stat <- rep(NA,B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n)
x_perm <- x_pooled[permutation]
x1_perm <- x_perm[1:n1]
x2_perm <- x_perm[(n1+1):n]
# test statistic:
T_stat[perm] <- median(x1_perm) - median(x2_perm)
}
# Permutational distribution of T
#hist(T_stat,xlim=range(c(T_stat,T0)),breaks=10)
#abline(v=T0,col=3,lwd=2)
#plot(ecdf(T_stat))
#abline(v=T0,col=3,lwd=2)
# p-value
p_val[i] <- sum(T_stat<T0)/B
stat[i] <- mean(T_stat)
Tzero[i] <- T0
}
p_val
p_adj <- p.adjust(p_val, 'fdr', n = 8)
p_adj
df <- read.table("mickey.txt")
head(df)
t <- df$day
g <- ifelse(df$day.of.the.week == 'weekdays', 1, 0)
w <- df$waiting.time
mod <- lm(w ~ g + I(1 + cos(4*pi*t/365)) + I(1 + cos(4*pi*t/365)):g)
summary(mod)
plot(t, w)
par(mfrow = c(2,2))
plot(mod)
shapiro.test(mod$residuals)
vif(mod$coefficients)
library(car)
vif(mod$coefficients)
vif(mod)
mod2 <- lm(w ~ g + I(1 + cos(4*pi*t/365)))
summary(mod2)
par(mfrow = c(2,2))
plot(mod2)
shapiro.test(mod2$residuals)
vif(mod2)
mod <- lm(w ~ g + I(1 + cos(4*pi*t/365)) + I(1 + cos(4*pi*t/365)):g)
summary(mod)
sigma <- sd(mod$residuals)
sigma
summary(mod2)
sigma <- sd(mod2$residuals)
sigma
sigma <- sd(mod$residuals)
sigma
prediction
shapiro.test(mod2$residuals)
t0.new <- data.frame(t = 238, g = 1)
Pred <- predict(fm, t0.new, interval='prediction', level=1-0.05)
Pred
t0.new <- data.frame(t = 238, g = 1)
Pred <- predict(mod2, t0.new, interval='prediction', level=1-0.05)
Pred
df <- read.table("debris.txt")
head(df)
plot(x,y,col = risk, data = df)
plot(df$x,df$y,col = df$risk)
x11()
plot(df$x,df$y,col = df$risk)
qda.deb <- qda(df[,1:2], df[,3])
library(MASS)
qda.deb <- qda(df[,1:2], df[,3])
summary(qda)
summary(qda.deb)
pred <- predict(qda.deb, df[,1:2])
pred
pred$class
table(class.true=df[,3], class.assigned=pred$class)
errorsq <- (pred$class != species.name)
errorsq
APERq   <- sum(errorsq)/length(df[,3])
APERq
table(class.true=df[,3], class.assigned=pred$class)
errorsq <- (pred$class != df[,3])
errorsq
APERq   <- sum(errorsq)/length(df[,3])
APERq
APERq
# Compute the estimate of the AER by leave-out-out cross-validation
QdaCV <- qda(df[,1:2], df[,3], CV=T)
QdaCV$class
table(class.true=df[,3], class.assignedCV=QdaCV$class)
errorsqCV <- (QdaCV$class != df[,3])
errorsqCV
AERqCV   <- sum(errorsqCV)/length(df[,3])
AERqCV
# Compute the estimate of the AER by leave-out-out cross-validation
QdaCV <- qda(df[,1:2], df[,3], CV=T)
QdaCV$class
table(class.true=df[,3], class.assignedCV=QdaCV$class)
errorsqCV <- (QdaCV$class != df[,3])
errorsqCV
AERqCV   <- sum(errorsqCV)/length(df[,3])
AERqCV
pred <- predict(qda.deb, df[,1:2])
table(class.true=df[,3], class.assigned=pred$class)
errorsq <- (pred$class != df[,3])
APERq   <- sum(errorsq)/length(df[,3])
APERq
library(MASS)
df <- read.table("debris.txt")
head(df)
x11()
plot(df$x,df$y,col = df$risk)
qda.deb <- qda(df[,1:2], df[,3])
summary(qda.deb)
pred <- predict(qda.deb, df[,1:2])
table(class.true=df[,3], class.assigned=pred$class)
errorsq <- (pred$class != df[,3])
APERq   <- sum(errorsq)/length(df[,3])
APERq
# Compute the estimate of the AER by leave-out-out cross-validation
QdaCV <- qda(df[,1:2], df[,3], CV=T)
QdaCV$class
table(class.true=df[,3], class.assignedCV=QdaCV$class)
errorsqCV <- (QdaCV$class != df[,3])
errorsqCV
AERqCV   <- sum(errorsqCV)/length(df[,3])
AERqCV
library(MASS)
df <- read.table("debris.txt")
head(df)
x11()
plot(df$x,df$y,col = df$risk)
qda.deb <- qda(df[,1:2], df[,3])
summary(qda.deb)
pred <- predict(qda.deb, df[,1:2])
table(class.true=df[,3], class.assigned=pred$class)
errorsq <- (pred$class != df[,3])
APERq   <- sum(errorsq)/length(df[,3])
APERq
# Compute the estimate of the AER by leave-out-out cross-validation
QdaCV <- qda(df[,1:2], df[,3], CV=T)
QdaCV$class
table(class.true=df[,3], class.assignedCV=QdaCV$class)
errorsqCV <- (QdaCV$class != df[,3])
AERqCV   <- sum(errorsqCV)/length(df[,3])
AERqCV
library(MASS)
df <- read.table("debris.txt")
head(df)
x11()
plot(df$x,df$y,col = df$risk)
qda.deb <- qda(df[,1:2], df[,3])
summary(qda.deb)
pred <- predict(qda.deb, df[,1:2])
table(class.true=df[,3], class.assigned=pred$class)
errorsq <- (pred$class != df[,3])
APERq   <- sum(errorsq)/length(df[,3])
APERq
# Compute the estimate of the AER by leave-out-out cross-validation
QdaCV <- qda(df[,1:2], df[,3], CV=T)
table(class.true=df[,3], class.assignedCV=QdaCV$class)
errorsqCV <- (QdaCV$class != df[,3])
AERqCV   <- sum(errorsqCV)/length(df[,3])
AERqCV
