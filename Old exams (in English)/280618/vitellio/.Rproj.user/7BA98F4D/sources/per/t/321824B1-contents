data <- read.table('tourists.txt', header=T)

#________________________________________________________________________________________________
# if in your dataset there are labels it is convient to save them in an other variable
label <- data[,1:2]
data <- data[,-(1:2)]
#________________________________________________________________________________________________


pca <- princomp(data, scores=T)
pca
summary(pca)

#________________________________________________________________________________________________
### PCA on standardized variables
data.sd <- scale(data)
data.sd <- data.frame(data.sd)

pca.sd <- princomp(data.sd, scores=T)
pca.sd
summary(pca.sd)
#________________________________________________________________________________________________


biplot(pca)

#To obtain the rows of the summary: standard deviation of the components
pca$sdev
#Proportion of variance explained by each PC
pca$sdev^2/sum(pca$sdev^2)
#Cumulative proportion of explained variance
cumsum(pca$sdev^2)/sum(pca$sdev^2)

#Scores (important to detect possible outliers)
scores <- pca$scores

x11()
layout(matrix(c(1,2),2))
boxplot(data, las=2, col='gold', main='Original variables')
scores <- data.frame(scores)
boxplot(scores, las=2, col='gold', main='Principal components')

#Loadings (recall: coefficients of the linear combination of the original variables that defines each principal component)
loading <- pca$loadings

par(mar = c(1,4,0,2), mfrow = c(6,1))
for(i in 1:6) barplot(loading[,i], ylim = c(-1, 1))


#####
#_______________________________________________________________________________________________
# Projection on the space generated by the k-th principal component
# Projection on the space generated by the first k principal components
#####
### Pay attention to adapt k to your dataset where it is written 

# Projection on the space generated by the k-th principal component
x11(width=21, height=7)
par(mfrow=c(2,5))     #check
matplot(t(data), type='l', main = 'Data', ylim=range(data))

sample.mean <- colMeans(data)
matplot(sample.mean, type='l', main = '0 PC', lwd=2, ylim=range(data))
for(i in 1:8)     #check
{
  projection <- matrix(sample.mean, dim(data)[[1]], dim(data)[[2]], byrow=T) + scores[,i] %*% t(loading[,i])
  matplot(t(projection), type='l', main = paste(i, 'PC'), ylim=range(data))
  matplot(sample.mean, type='l', lwd=2, add=T)
}

# Projection on the space generated by the first k principal components
x11(width=21, height=7)
par(mfrow=c(2,5))     #check
matplot(t(data), type='l', main = 'Data', ylim=range(data))

sample.mean <- colMeans(data)
matplot(sample.mean, type='l', main = 'First 0 PCs', lwd=2, ylim=range(data))
projection <- matrix(sample.mean, dim(data)[[1]], dim(data)[[2]], byrow=T)
for(i in 1:8)     #check
{
  projection <- projection + scores[,i] %*% t(loading[,i])
  matplot(t(projection), type='l', main = paste('First', i, 'PCs'), ylim=range(data))
  matplot(sample.mean, type='l', lwd=2, add=T)
}
#####
#_______________________________________________________________________________________________
# same thing, but with std data
##### 
### Pay attention to adapt k to your dataset where it is written 

# Projection on the space generated by the k-th principal component
x11(width=21, height=7)
par(mfrow=c(2,4))     #check
matplot(t(data.sd), type='l', main = 'Data', ylim=range(data.sd))

sample.mean.sd <- rep(0,dim(data.sd)[2])
matplot(sample.mean.sd, type='l', main = '0 PC', lwd=2, ylim=range(data.sd))
for(i in 1:6)     #check
{
  projection <- matrix(sample.mean.sd, dim(data.sd)[[1]], dim(data.sd)[[2]], byrow=T) + pca.sd$scores[,i] %*% t(pca.sd$loadings[,i])
  matplot(t(projection), type='l', main = paste(i, 'PC'), ylim=range(data.sd))
  matplot(sample.mean, type='l', lwd=2, add=T)
}

# Projection on the space generated by the first k principal components
x11(width=21, height=7)
par(mfrow=c(2,4))     #check
matplot(t(data.sd), type='l', main = 'Data', ylim=range(data.sd))

sample.mean.sd <- rep(0,dim(data.sd)[2])
matplot(sample.mean.sd, type='l', main = 'First 0 PCs', lwd=2, ylim=range(data.sd))
projection <- matrix(sample.mean.sd, dim(data)[[1]], dim(data)[[2]], byrow=T)
for(i in 1:6)     #check
{
  projection <- projection + pca.sd$scores[,i] %*% t(pca.sd$loadings[,i])
  matplot(t(projection), type='l', main = paste('First', i, 'PCs'), ylim=range(data.sd))
  matplot(sample.mean.sd, type='l', lwd=2, add=T)
}
#####
#In lab 3 line 294 you'll find a way to plot your data with different colors according to a label.

#####
#_______________________________________________________________________________________________
# Compute the scores for a new datum
#####
newdata <- c(0,0,0,0,0,0,0,0)
scores.newdata <- t(loading)%*%(newdata-colMeans(data))
scores.newdata

x11()
pairs(data.frame(rbind(data,newdata)), col=c(rep(1,dim(data)[1]),2))

x11()
plot(scores[,1],scores[,2],col='grey',pch=19,xlab='Comp.1',ylab='Comp.2')
points(scores.newdata[1],scores.newdata[2],col='black',pch=19) 
