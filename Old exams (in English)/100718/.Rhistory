q.min.ort <- x.min[2] - m1.ort*x.min[1]
q.max.ort <- x.max[2] - m1.ort*x.max[1]
abline(q.min.ort, m1.ort, col='forestgreen', lty=2,lwd=1)
abline(q.max.ort, m1.ort, col='forestgreen', lty=2,lwd=1)
m1=worst[2]/worst[1] # worst direction
abline(0, m1, col='grey35')
segments(x.min[1],x.min[2],x.max[1],x.max[2],lty=1,lwd=2, col='forestgreen')
library(car)
df1 <- read.table("presales.txt")
head(df1)
df2 <- read.table("sales.txt")
head(df2)
load("mcshapiro.test.Rdata")
mcshapiro.test(df1)
mcshapiro.test(df2)
# siamo davanti a dati normali bivariati
D <- data.frame(ff = (df1$Flip.Flops- df2$Flip.Flops)/df1$Flip.Flops, ss = (df1$Swimsuit - df2$Swimsuit)/df1$Swimsuit)
head(D)
mcshapiro.test(D) # è sempre normale bivariata
matplot(t(D), type = 'l') # proviamo a dimostrare con un test che la differenza è nulla
n <- dim(D)[1]  # 45
p <- dim(D)[2]  #  2
D.mean   <- sapply(D,mean)
D.cov    <- cov(D)
D.invcov <- solve(D.cov)
alpha   <- .01
delta.0 <- c(0.2,0.2)
D.T2 <- n * (D.mean-delta.0) %*% D.invcov %*% (D.mean-delta.0)
D.T2
cfr.fisher <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
cfr.fisher
D.T2 < cfr.fisher # TRUE: we accept H0 at level 1%
# we compute the p-value
P <- 1-pf(D.T2*(n-p)/(p*(n-1)), p, n-p)
P # 0.1749
# possiamo accettare l'ipotesi che lo sconto sia del 20% su entrambi i prodotti
D.mean   <- sapply(D,mean)
D.cov    <- cov(D)
D.mean # point estimate for the mean of discount
D.cov # point estimate for covariance matrix of discount
# Ellipsoidal confidence region with confidence level 99%
### Simultanouse T2 intervals
IC.T2.ff <- c( D.mean[1]-sqrt(cfr.fisher*D.cov[1,1]/n) , D.mean[1], D.mean[1]+sqrt(cfr.fisher*D.cov[1,1]/n) )
IC.T2.ss <- c( D.mean[2]-sqrt(cfr.fisher*D.cov[2,2]/n) , D.mean[2], D.mean[2]+sqrt(cfr.fisher*D.cov[2,2]/n) )
T2 <- rbind(IC.T2.ff, IC.T2.ss)
dimnames(T2)[[2]] <- c('inf','center','sup')
T2
x11()
plot(D, asp=1, pch=1, main='Dataset of the Differences')
ellipse(center=D.mean, shape=D.cov/n, radius=sqrt(cfr.fisher), lwd=2)
abline(v = T2[1,1], col='red', lwd=1, lty=2)
abline(v = T2[1,3], col='red', lwd=1, lty=2)
abline(h = T2[2,1], col='red', lwd=1, lty=2)
abline(h = T2[2,3], col='red', lwd=1, lty=2)
points(delta.0[1], delta.0[2], pch=16, col='grey35', cex=1.5)
abline(h=delta.0[1], v=delta.0[2], col='grey35')
worst <- D.invcov %*% (D.mean-delta.0)
worst <- worst/sqrt(sum(worst^2))
worst
# Angle with the x-axis:
theta.worst <- atan(worst[2]/worst[1])+pi
theta.worst
# Confidence interval along the worst direction:
IC.worst  <- c( D.mean %*% worst - sqrt(cfr.fisher*(t(worst)%*%D.cov%*%worst)/n),
D.mean %*% worst,
D.mean %*% worst + sqrt(cfr.fisher*(t(worst)%*%D.cov%*%worst)/n) )
IC.worst
delta.0%*%worst
x11()
plot(D, asp=1, pch=1, main='Dataset of the Differences')
ellipse(center=D.mean, shape=D.cov/n, radius=sqrt(cfr.fisher), lwd=2)
abline(v = T2[1,1], col='red', lwd=1, lty=2)
abline(v = T2[1,3], col='red', lwd=1, lty=2)
abline(h = T2[2,1], col='red', lwd=1, lty=2)
abline(h = T2[2,3], col='red', lwd=1, lty=2)
points(delta.0[1], delta.0[2], pch=16, col='grey35', cex=1.5)
abline(h=delta.0[1], v=delta.0[2], col='grey35')
# Extremes of IC.worst in the coordinate system (x,y):
x.min <- IC.worst[1]*worst
x.max <- IC.worst[3]*worst
m1.ort <- -worst[1]/worst[2]
q.min.ort <- x.min[2] - m1.ort*x.min[1]
q.max.ort <- x.max[2] - m1.ort*x.max[1]
abline(q.min.ort, m1.ort, col='forestgreen', lty=2,lwd=1)
abline(q.max.ort, m1.ort, col='forestgreen', lty=2,lwd=1)
m1=worst[2]/worst[1] # worst direction
abline(0, m1, col='grey35')
segments(x.min[1],x.min[2],x.max[1],x.max[2],lty=1,lwd=2, col='forestgreen')
x11()
plot(D, asp=1, pch=1, main='Dataset of the Differences')
ellipse(center=D.mean, shape=D.cov/n, radius=sqrt(cfr.fisher), lwd=2)
abline(v = T2[1,1], col='red', lwd=1, lty=2)
abline(v = T2[1,3], col='red', lwd=1, lty=2)
abline(h = T2[2,1], col='red', lwd=1, lty=2)
abline(h = T2[2,3], col='red', lwd=1, lty=2)
points(delta.0[1], delta.0[2], pch=16, col='grey35', cex=1.5)
abline(h=delta.0[1], v=delta.0[2], col='grey35')
# Extremes of IC.worst in the coordinate system (x,y):
x.min <- IC.worst[1]*worst
x.max <- IC.worst[3]*worst
m1.ort <- -worst[1]/worst[2]
q.min.ort <- x.min[2] - m1.ort*x.min[1]
q.max.ort <- x.max[2] - m1.ort*x.max[1]
abline(q.min.ort, m1.ort, col='forestgreen', lty=2,lwd=1)
abline(q.max.ort, m1.ort, col='forestgreen', lty=2,lwd=1)
m1=worst[2]/worst[1] # worst direction
abline(0, m1, col='grey35')
segments(x.min[1],x.min[2],x.max[1],x.max[2],lty=1,lwd=2, col='forestgreen')
df <- read.table("focaccia.txt")
head(df)
we <- ifelse(df$day == 'weekday', 0,1)
we
mod <- lm(kg ~ we*t + wd*t)
mod <- lm(kg ~ we*t + wd*t, data = df)
df$wd <- ifelse(df$day == 'weekday', 1,0)
mod <- lm(kg ~ we*t + wd*t, data = df)
summary(mod)
df <- read.table("focaccia.txt")
head(df)
#df$we <- ifelse(df$day == 'weekday', 0,1)
df$wd <- ifelse(df$day == 'weekday', 1,0)
mod <- lm(kg ~ we + we:t, data = df)
summary(mod)
df <- read.table("focaccia.txt")
head(df)
df$we <- ifelse(df$day == 'weekday', 0,1)
mod <- lm(kg ~ we + we:t, data = df)
summary(mod)
df$we <- ifelse(df$day == 'weekday', 1,0)
mod <- lm(kg ~ we + we:t, data = df)
summary(mod)
df$wd <- ifelse(df$day == 'weekday', 1,0)
mod <- lm(kg ~ wd + wd:t, data = df)
summary(mod)
df <- read.table("focaccia.txt")
head(df)
df$wd <- ifelse(df$day == 'weekday', 1,0)
mod <- lm(kg ~ wd + wd:t, data = df)
summary(mod)
df
df <- read.table("focaccia.txt")
head(df)
df$we <- ifelse(df$day == 'weekday', 0,1)
df$wd <- ifelse(df$day == 'weekday', 1,0)
mod <- lm(kg ~ wd + we + wd:t + we:t, data = df)
summary(mod)
we
df <- read.table("focaccia.txt")
head(df)
df$we <- ifelse(df$day == 'weekday', 0,1)
df$wd <- ifelse(df$day == 'weekday', 1,0)
mod <- lm(kg ~ wd + we + wd:t + we:t, data = df)
summary(mod)
we
df$we
df$wd
df <- read.table("focaccia.txt")
df$we <- ifelse(df$day == 'weekday', 0,1)
df$wd <- ifelse(df$day == 'weekday', 1,0)
head(df)
mod <- lm(kg ~ wd + we + wd:t + we:t, data = df)
summary(mod)
df <- read.table("focaccia.txt")
df$we <- ifelse(df$day == 'weekday', 0,1)
df$wd <- ifelse(df$day == 'weekday', 1,0)
head(df)
mod <- lm(kg ~ wd + we + wd:t + we:t + t, data = df)
summary(mod)
mod <- lm(kg ~ wd + wd:t + t, data = df)
summary(mod)
df <- read.table("focaccia.txt")
df$we <- ifelse(df$day == 'weekday', 0,1)
df$wd <- ifelse(df$day == 'weekday', 1,0)
head(df)
mod <- lm(kg ~ wd + wd:t + t, data = df)
summary(mod)
df <- read.table("focaccia.txt")
df$wd <- ifelse(df$day == 'weekday', 1,0)
head(df)
mod <- lm(kg ~ wd + wd:t + t, data = df)
summary(mod)
df$wd <- ifelse(df$day == 'weekday', 1,0) #dummy variable
head(df)
mod <- lm(kg ~ wd + wd:t + t, data = df)
summary(mod)
mod$coefficients
mod <- lm(kg ~ we + we:t + t, data = df)
summary(mod)
mod$coefficients
mod <- lm(kg ~ wd + wd:t + t, data = df)
summary(mod)
mod$coefficients
mod <- lm(kg ~ we + we:t + t, data = df)
summary(mod)
mod$coefficients
mod <- lm(kg ~ wd + wd:t + t, data = df)
summary(mod)
mod$coefficients
mod <- lm(kg ~ wd + wd:t + t, data = df)
summary(mod)
mod$coefficients
mod$residuals
corr(mod$residuals)
cor(mod$residuals)
cov(mod$residuals)
var(mod$residuals)
# (Intercept)          wd           t        wd:t
# 108.6863770 -73.4140787   1.6302864   0.5043036
sd(mod$residuals)
par(mfrow = c(2,2))
plot(mod)
#13.1188
shapiro.test(mod$residuals)
par(mfrow = c(2,2))
plot(mod)
shapiro.test(mod$residuals)
mod <- lm(kg ~ wd + t + wd:t, data = df)
summary(mod)
mod$coefficients
# (Intercept)          wd           t        wd:t
# 108.6863770 -73.4140787   1.6302864   0.5043036
sd(mod$residuals)
par(mfrow = c(2,2))
plot(mod)
shapiro.test(mod$residuals)
linearHypothesis(mod,
rbind(c(0,1,0,0),
c(0,0,0,1)),
c(0,0,0,0))
linearHypothesis(mod,
rbind(c(0,1,0,0),
c(0,0,0,1)),
c(0,0))
linearHypothesis(mod,
rbind(c(1,0,0,0),
c(0,1,0,0),
c(0,0,0,1)),
c(0,0,0))
vif(mod)
# proviamo a rimuovere wd:t
mod <- lm(kg ~ wd + t, data = df)
summary(mod)
mod <- lm(kg ~ wd + t + wd:t, data = df)
summary(mod)
mod <- lm(kg ~ wd + t, data = df)
summary(mod)
vif(mod)
linearHypothesis(mod,
rbind(c(1,0,0),
c(0,1,0),
c(0,0))
linearHypothesis(mod,
rbind(c(1,0,0),
c(0,1,0),
c(0,0)))
linearHypothesis(mod,
rbind(c(1,0,0),
c(0,1,0),
c(0,0)))
linearHypothesis(mod,
rbind(c(0,1,0),
c(0,0,1),
c(0,0)))
mod <- lm(kg ~ wd + t, data = df)
summary(mod)
vif(mod)
linearHypothesis(mod,
rbind(c(0,1,0),
c(0,0,1),
c(0,0)))
linearHypothesis(mod,
rbind(c(0,1,0),
c(0,0)))
linearHypothesis(mod,
rbind(c(0,1,0)),
C(0))
linearHypothesis(mod,
rbind(c(0,1,0)),
0)
setwd("C:/Users/gianm/Desktop/TDEApplied/Labs/Lab11-Linear-Models")
data <- read.table('work.txt', header=T)
head(data)
dim(data)
n <- dim(data)[1]
names(data)
attach(data)
Y <- Average_Score
X <- Years_Service
C1 <- Sex
C2 <- Race
detach(data)
plot(X, Y, main='Scatterplot di Y vs X', lwd=2,
xlab='Years of Service', ylab='Average Score')
result <- lm(Y ~ X)
summary(result)
coef <- result$coef
abline(coef[1],coef[2],lwd=2)
# differences between males and females:
col <- rep('blue',n)
females <- which(C1=='Female')
males <- which(C1=='Male')
col[females] <- 'red'
plot(X, Y, main='Scatterplot di Y vs X', lwd=2,
xlab='Years of Service', ylab='Average Score', col = col)
C1.new <- rep(0,n)
C1.new[males] <- 1
result1 <- lm(Y ~  X + C1.new + X:C1.new)
summary(result1)
result2 <- lm(Y ~ C1.new + X)
summary(result2)
plot(X, Y, main='Scatterplot of Y vs X', lwd=2,
xlab='Years of Service', ylab='Average Score', col = col)
coef <- result2$coef
abline(coef[1],coef[3],lwd=2,col='indianred')
abline(coef[1]+coef[2],coef[3],lwd=2,col='cornflowerblue')
# diagnostics of the residuals
par(mfrow=c(2,2))
plot(result2)
shapiro.test(residuals(result2))
dev.off()
# qualitative predictors:
C1
C2
C1.new
notwhite <- which(C2=='Nonwhite')
white <- which(C2=='White')
C2.new <- rep(0,n)
C2.new[notwhite] <- 0
C2.new[white] <- 1
# 4 cases:
# females white
FB <- which(C1.new==0 & C2.new==1)
# females not white
FNB <- which(C1.new==0 & C2.new==0)
# males white
MB <- which(C1.new==1 & C2.new==1)
# males not white
MNB <- which(C1.new==1 & C2.new==0)
# colors for the plot
col <- rep(NA,n)
col[FB] <- 'pink'
col[FNB] <- 'red'
col[MB] <- 'light blue'
col[MNB] <- 'blue'
# shape of the dots for the plot
shape <- rep(0,n)
shape[FB] <- 21
shape[FNB] <- 22
shape[MB] <- 23
shape[MNB] <- 24
plot(X, Y, main='Scatterplot Y vs X', lwd=2,
xlab='Years of Service', ylab='Average Score', col = col, pch = shape)
result3 <- lm(Y ~ X + C1.new + C2.new + X:C1.new + X:C2.new)
result3
summary(result3)
result4 <- lm(Y ~ X + C1.new + C2.new + X:C2.new)
result4
summary(result4)
result5 <- lm(Y ~ X + C1.new + C2.new)
result5
summary(result5)
plot(X, Y, main='Scatterplot of Y vs X', lwd=2,
xlab='Years of Service', ylab='Average Score', col = col)
coef <- result5$coef
abline(coef[1],coef[2],lwd=2,col='indianred') # female, nonwhite
abline(coef[1]+coef[3],coef[2],lwd=2,col='cornflowerblue') # male, nonwhite
abline(coef[1]+coef[4],coef[2],lwd=2,col='pink2') # female, white
abline(coef[1]+coef[3]+coef[4],coef[2],lwd=2,col='lightblue3') # male, white
par(mfrow=c(2,2))
plot(result5)
shapiro.test(residuals(result5))
setwd("C:/Users/gianm/Desktop/TDEApplied/Labs/Lab12-Linear-Models")
library(MASS)
library(car)
library(rgl)
library(glmnet)
### TOPICS:
### Linear models
install.packages(glmnet)
### TOPICS:
### Linear models
install.packages("glmnet")
library(MASS)
library(car)
library(rgl)
library(glmnet)
cars
plot(cars, xlab='Speed', ylab='Stopping distance', las=1)
n          <- dim(cars)[[1]]
distance   <- cars$dist
speed1     <- cars$speed
speed2     <- cars$speed^2
fm <- lm(distance ~ speed1 + speed2)
summary(fm)
# Variance inflation factor
help(vif)
vif(fm)
speed.pc <- princomp(cbind(speed1,speed2), scores=TRUE)
summary(speed.pc)
speed.pc$load
sp1.pc <- speed.pc$scores[,1]
sp2.pc <- speed.pc$scores[,2]
# Now we estimate the model by inserting the PCs instead of the
# original regressors
# Model: y = b0 + b1*PC1+ b2*PC2 + eps, eps~N(0,sigma^2)
fm.pc <- lm(distance ~ sp1.pc + sp2.pc)
summary(fm.pc)
x <- seq(0, 25, len=100)
plot(cars, xlab='Speed', ylab='Stopping distance', las=1)
lines(x, beta0+beta1*x+beta2*x^2)
#    regressors
m1 <- mean(speed1)
m2 <- mean(speed2)
beta0 <- coefficients(fm.pc)[1] -
coefficients(fm.pc)[2]*speed.pc$load[1,1]*m1 -
coefficients(fm.pc)[3]*speed.pc$load[1,2]*m1 -
coefficients(fm.pc)[2]*speed.pc$load[2,1]*m2 -
coefficients(fm.pc)[3]*speed.pc$load[2,2]*m2
beta1 <- coefficients(fm.pc)[2]*speed.pc$load[1,1] +
coefficients(fm.pc)[3]*speed.pc$load[1,2]
beta2 <- coefficients(fm.pc)[2]*speed.pc$load[2,1] +
coefficients(fm.pc)[3]*speed.pc$load[2,2]
c(beta0=as.numeric(beta0),beta1=as.numeric(beta1),beta2=as.numeric(beta2))
fm$coefficients
x <- seq(0, 25, len=100)
plot(cars, xlab='Speed', ylab='Stopping distance', las=1)
lines(x, beta0+beta1*x+beta2*x^2)
fm.pc <- lm(distance ~ sp1.pc)
summary(fm.pc)
par(mfrow=c(2,2))
plot(fm.pc)
shapiro.test(residuals(fm.pc))
dev.off()
fm.2 <- lm(distance ~ speed2)
summary(fm.2)
plot(speed2, distance, xlab='speed2', ylab='Stopping distance', las=1, xlim=c(15,626), ylim=c(-5,130))
x <- seq(0,650,by=1)
b <- coef(fm.2)
lines(x, b[1]+b[2]*x)
plot(cars, xlab='Speed', ylab='Stopping distance', las=1, xlim=c(0,30), ylim=c(-5,130))
x <- seq(0,30,by=0.1)
b <- coef(fm.2)
lines(x, b[1]+b[2]*x^2)
dev.off()
### Otherwise, another possible solution to collinearity: ridge regression
help(lm.ridge)
# Fix lambda
lambda <- .5
fit.ridge <- lm.ridge(distance ~ speed1 + speed2, lambda = lambda)
coef.ridge <- coef(fit.ridge)
yhat.lm <- cbind(rep(1,n), speed1, speed2)%*%coef(fm)  # LM fitted values
yhat.r <- cbind(rep(1,n), speed1, speed2)%*%coef.ridge # ridge fitted values
plot(speed1, yhat.lm, type='l', lty=4, lwd=2, ylab='Distance',xlab='Speed')
points(speed1, distance, pch=1, cex=.8)
matlines(speed1, yhat.r, type='l', lty=1,col=grey.colors(length(lambda)), lwd=2)
legend("topleft",c("lm","ridge"),lty=c(4,1),col=c("black",grey.colors(length(lambda))),lwd=2)
# Repeat for a grid of lambda's
lambda.c <- seq(0,10,0.01)
fit.ridge <- lm.ridge(distance ~ speed1 + speed2, lambda = lambda.c)
x11(width=14, height=5)
par(mfrow=c(1,3))
plot(lambda.c,coef(fit.ridge)[,1], type='l', xlab=expression(lambda),
ylab=expression(beta[0]))
abline(h=coef(fm)[1], lty=2)
plot(lambda.c,coef(fit.ridge)[,2], type='l', xlab=expression(lambda),
ylab=expression(beta[1]))
abline(h=coef(fm)[2], lty=2)
plot(lambda.c,coef(fit.ridge)[,3], type='l', xlab=expression(lambda),
ylab=expression(beta[2]))
abline(h=coef(fm)[3], lty=2)
setwd("C:/Users/gianm/Desktop/TDEApplied/Old exams (in English)/100718")
df <- read.table("focaccia.txt")
df$wd <- ifelse(df$day == 'weekday', 1,0) #dummy variable
#df$we <- ifelse(df$day == 'weekday', 0,1) #dummy variable
head(df)
mod <- lm(kg ~ wd + t + wd:t, data = df)
summary(mod)
mod$coefficients
# (Intercept)          wd           t        wd:t
# 108.6863770 -73.4140787   1.6302864   0.5043036
sd(mod$residuals)
#13.1188
par(mfrow = c(2,2))
plot(mod)
shapiro.test(mod$residuals)
linearHypothesis(mod,
rbind(c(1,0,0,0),
c(0,1,0,0),
c(0,0,0,1)),
c(0,0,0))
summary(mod)
# (Intercept)          wd           t        wd:t
# 108.6863770 -73.4140787   1.6302864   0.5043036
vif(mod)
shapiro.test(mod$residuals)
mod <- lm(kg ~ wd + t, data = df)
summary(mod)
vif(mod)
# wd        t
# 1.047392 1.047392
plot(mod)
par(mfrow = c(2,2))
plot(mod)
linearHypothesis(mod,
rbind(c(1,0,0,0),
c(0,1,0,0),
c(0,0,0,1)),
c(0,0,0))
linearHypothesis(mod,
rbind(c(0,0,1)),
0)
vif(mod)
