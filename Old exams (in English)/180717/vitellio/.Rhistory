rm(list = ls ())
data <- read.table(file = "horsecolic.txt")
head(data)
summary(data)
pain <- data[which(data$Pain == "Yes")]
data$Pain == "Yes"
which(data$Pain == "Yes")
i2 <- which(data$Pain == "No")
pain <- data[,i1]
pain <- data[i1,]
i1 <- which(data$Pain == "Yes")
i2 <- which(data$Pain == "No")
pain <- data[i1,]
nopain <- data[i2,]
n1 <- length(i1)
n2 <- length(i2)
n <- dim(data)[1]
p <- dim(data)[2]-1
head(data)
k <- 5
alpha <- 0.01
load("mcshapiro.test.RData")
mcshapiro.test(pain)
mcshapiro.test(nopain)
pain <- data[i1,1:p]
nopain <- data[i2,1:p]
mcshapiro.test(pain)
alpha <- 0.01
mcshapiro.test(nopain)
S1 <- cov(pain)
S2 <- cov(nopain)
S1
S2
x11(width=21)
par(mfrow=c(1,2))
image(S1, col=heat.colors(100),main='Cov. S1', asp=1, axes = FALSE, breaks = quantile(rbind(S1,S2,S3,S4), (0:100)/100, na.rm=TRUE))
image(S2, col=heat.colors(100),main='Cov. S2', asp=1, axes = FALSE, breaks = quantile(rbind(S1,S2,S3,S4), (0:100)/100, na.rm=TRUE))
image(S1, col=heat.colors(100),main='Cov. S1', asp=1, axes = FALSE, breaks = quantile(rbind(S1,S2), (0:100)/100, na.rm=TRUE))
image(S2, col=heat.colors(100),main='Cov. S2', asp=1, axes = FALSE, breaks = quantile(rbind(S1,S2), (0:100)/100, na.rm=TRUE))
Spooled <- (n1-1)*S1 + (n2-1)*S2
cfr.t <- qt(1-alpha/(2*k), n1+n2-2)
x.mean1 <- sapply(pain, mean)
x.mean2 <- sapply(nopain, mean)
x.mean1 <- sapply(pain, mean)
x.mean2 <- sapply(nopain, mean)
x.mean <- x.mean1 - x.mean2
x.mean
Spooled <- ((n1-1)*S1 + (n2-1)*S2)/(n1+n2-2)
Spooled
Bf <- cbind(inf = x.mean - cfr.t*sqrt(diag(Spooled)*(1/n1+1/n2)),
center = x.mean,
sup = x.mean + cfr.t*sqrt(diag(Spooled)*(1/n1+1/n2)))
Bf
S1
S2
x11(width=21)
par(mfrow=c(1,2))
image(S1, col=heat.colors(100),main='Cov. S1', asp=1, axes = FALSE, breaks = quantile(rbind(S1,S2), (0:100)/100, na.rm=TRUE))
image(S2, col=heat.colors(100),main='Cov. S2', asp=1, axes = FALSE, breaks = quantile(rbind(S1,S2), (0:100)/100, na.rm=TRUE))
Bf
plot(data[,2:3], col = data$Pain)
plot(data[,2:3], col = data$Pain + 1)
plot(data[,2:3], col = data$Pain + 1)
plot(data[,2:3], col = data$Pain)
classificator1 <- lda(data[,2:3], data$Pain)
library(MASS)
classificator1 <- lda(data[,2:3], data$Pain)
classificator1
# c)
reclass <- predict(classificator1, data[,2:3])
table(class.true=data$Pain, class.assigned=reclass$class)
errori <- (reclass$class != data$Pain)
APER   <- sum(errori)/length(species.name)
APER
APER   <- sum(errori)/n
APER
errori <- (reclass$class != data$Pain)
APER   <- sum(errori)/n
APER
iris2 <- data[,2:3]
x11()
plot(iris2, pch=20)
points(iris2[i1,], col='red', pch=20)
points(iris2[i2,], col='green', pch=20)
x  <- seq(min(iris2[,1]), max(iris2[,1]), length=200)
y  <- seq(min(iris2[,2]), max(iris2[,2]), length=200)
xy <- expand.grid(Pulse=x, Respiratory.rate=y)
z  <- predict(lda.iris, xy)$post
z1 <- z[,1] - z[,2]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
z  <- predict(classificator1, xy)$post
z1 <- z[,1] - z[,2]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
classificator2 <- qda(data[,2:3], data$Pain)
# c)
reclass <- predict(classificator2, data[,2:3])
table(class.true=data$Pain, class.assigned=reclass$class)
errori <- (reclass$class != data$Pain)
APER   <- sum(errori)/n
APER
# c)
reclass <- predict(classificator1, data[,2:3])
table(class.true=data$Pain, class.assigned=reclass$class)
errori <- (reclass$class != data$Pain)
APER   <- sum(errori)/n
APER
z  <- predict(classificator2, xy)$post
z1 <- z[,1] - z[,2]
contour(x, y, matrix(z1, 200), levels=0, drawlabels=F, add=T)
table(class.true=data$Pain, class.assigned=reclass$class)
7/221+11/79
reclass$class
errori <- (reclass$class != data$Pain)
APER   <- sum(errori)/n
APER   # 0.06 lda / 0.0533 qda
table(class.true=data$Pain, class.assigned=reclass$class)
table(class.true=data$Pain, class.assigned=reclass$class)
length(errori)
length(errori)
classificator1$prior
classificator1$prior%*%c(2/221,11/79)
classificator1$prior%*%c(7/221,11/79)
APER   <- sum(errori)/n
APER   # 0.06 lda / 0.0533 qda
# c)
reclass <- predict(classificator2, data[,2:3])
table(class.true=data$Pain, class.assigned=reclass$class)
Bf
cfr.t
k <- 4
cfr.t <- qt(1-alpha/(2*k), n1+n2-2)
Bf <- cbind(inf = x.mean - cfr.t*sqrt(diag(Spooled)*(1/n1+1/n2)),
center = x.mean,
sup = x.mean + cfr.t*sqrt(diag(Spooled)*(1/n1+1/n2)))
Bf
rm(list = ls ())
data <- read.table(file = "castle.txt")
load("mcshapiro.test.RData")
head(data)
summary(data)
mcshapiro.test(data)
help(t.test)
head(data)
center <- c(Lat = 45.733, Long = 7.333)
t.test(data, mu = center)
x.mean   <- colMeans(data)
x.cov    <- cov(data)
x.invcov <- solve(x.cov)
alpha <- 0.05
x.T2       <- n * (x.mean-center) %*% x.invcov %*% (x.mean-center)
n <- dim(data)[1]
p <- dim(data)[2]
# 3a) Verify if the test statistics belongs to the rejection region
cfr.fisher <- ((n-1)*p/(n-p))*qf(1-alpha,p,n-p)
x.T2 < cfr.fisher # we accept H0 at 5%
x.T2       <- n * (x.mean-center) %*% x.invcov %*% (x.mean-center)
x.T2 < cfr.fisher # we accept H0 at 5%
x.mean
# 3b) Compute the p-value
P <- 1-pf(x.T2*(n-p)/((n-1)*p), p, n-p)
P
eigen(x.cov/n)$vectors
# Length of the semi-axes of the ellipse:
r <- sqrt(cfr.fisher)
r*sqrt(eigen(x.cov/n)$values)
plot(data)
points(center, col = "Red)
points(center, col = "Red")
plot(data)
points(center, col = "Red")
points(center, col = "red")
points(center, col = "red", pch =20)
points(center, col = 'red', pch =20)
points(center, col = 'red', pch =20)
points(center, col='green', pch=20)
plot(data)
points(center, col='green', pch=20)
ellipse(center, shape=x.cov/n, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
library(car)
ellipse(center, shape=x.cov/n, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
help("ellipse")
ellipse(x.mean, x.cov/n, sqrt(cfr.fisher), col = 'red', lty = 2, lwd=2, center.cex=1)
r*sqrt(eigen(x.cov)$values)
# ellipse for the mean
library(car)
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2, xlim = c(45.5,46))
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2, xlim = c(45.5,46))
x11()
plot(data)
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2, xlim = c(45.5,46))
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
plot(data, xlim = c(45.5,46))
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
plot(data, xlim = c(45.65,45.75))
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
plot(data, xlim = c(45.68,45.78))
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
plot(data, xlim = c(45.68,45.78), ylim = c(7.2,7.4))
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
plot(data, xlim = c(45.68,45.78), ylim = c(7.25,7.5))
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
plot(data, xlim = c(45.68,45.78), ylim = c(7.20,7.5))
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
P
# Length of the semi-axes of the ellipse:
cfr.chisq <- qchisq(1-alpha,p)
r <- sqrt(cfr.chisq)
r*sqrt(eigen(cfr.chisq)$values)
x.cov
r*sqrt(eigen(x.cov)$values)
plot(data, xlim = c(45.68,45.78), ylim = c(7.20,7.5))
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
plot(data, xlim = c(45.68,45.78), ylim = c(7.20,7.5))
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='red')
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'red', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
eigen(x.cov)$vectors
eigen(x.cov/n)$vectors
eigen(x.cov)$vectors
r1 <- sqrt(cfr.fisher)
r1*sqrt(eigen(x.cov)$values)
r*sqrt(eigen(x.cov)$values)
plot(data, xlim = c(45.68,45.78), ylim = c(7.20,7.5))
ellipse(center, shape=x.cov, sqrt(cfr.chisq), col = 'blue', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
ellipse(center, shape=x.cov, sqrt(cfr.fisher), col = 'red', lty = 2, center.pch = 4, center.cex=1.5, lwd=2)
points(center[1], center[2], pch = 4, cex = 1.5, lwd = 2, col ='blue')
eigen(x.cov)$vectors
r*sqrt(eigen(x.cov)$values)
r <- sqrt(cfr.chisq)
r*sqrt(eigen(x.cov)$values)
# Length of the semi-axes of the ellipse:
cfr.chisq <- qchisq(1-alpha,p)
r <- sqrt(cfr.chisq)
r*sqrt(eigen(x.cov)$values)
r
p
rm(list = ls())
data <- read.table("albatross.txt")
head(data)
summary(data)
as.factor(data$wind)
data$wind <- as.factor(data$wind)
data$wind <- as.factor(data$wind)
summary(data)
fit <- lm(distance ~ wind + I(Vi^2) + wind*I(Vi^2) +  I(Va^2) + wind*I(Va^2), data = data)
fit
summary(data)
summary(fit)
library(car)
fit <- lm(distance ~ wind*I(Vi^2) + wind*I(Va^2), data = data)
summary(fit)
fit <- lm(distance ~ wind*I(Vi^2) + wind*I(Va^2), data = data)
summary(fit)
fit <- lm(distance ~ I(Vi^2) + I(Va^2) + wind:I(Vi^2) + wind:I(Va^2), data = data)
summary(fit2)
summary(fit2)
fit2 <- lm(distance ~ I(Vi^2) + I(Va^2) + wind:I(Vi^2) + wind:I(Va^2), data = data)
summary(fit2)
A <- rbind(c(0,1,1,1,1),
c(0,1,1,0,0))
b <- c(0,0)
linearHypothesis(A,b)
A
b <- rbind(0,0)
b
linearHypothesis(A,b)
linearHypothesis(fit2, A,b)
fit3 <- lm(distance ~ I(Va^2-Vi^2) + wind:I(Va^2-Vi^2), data = data)
summary(fit3)
# d)
newdatum <- data.frame()
summary(data)
# d)
newdatum <- data.frame(Vi = 25, Va = 35)
# d)
newdatum <- data.frame(Vi = 25, Va = 35, wind = as.factor("upwind"))
predict(fit3, newdaum)
predict(fit3, newdatum)
help("predict")
predict(fit3, newdatum)
predict(fit3, newdatum, interval = "prediction")
predict(fit3, newdatum, interval = "prediction", level = 0.995)
newdatum1 <- data.frame(Vi = 25, Va = 35, wind = as.factor("downwind"))
predict(fit3, newdatum, interval = "prediction", level = 0.995)
predict(fit3, newdatum1, interval = "prediction", level = 0.995)
data <- read.table(file = "horsecolic.txt")
load("mcshapiro.test.RData")
head(data)
summary(data)
i1 <- which(data$Pain == "Yes")
i2 <- which(data$Pain == "No")
n1 <- length(i1)
n2 <- length(i2)
n <- dim(data)[1]
p <- dim(data)[2]-1
pain <- data[i1,1:p]
nopain <- data[i2,1:p]
mcshapiro.test(pain)
mcshapiro.test(nopain)
S1 <- cov(pain)
S2 <- cov(nopain)
S1
S2
x11(width=21)
Spooled <- ((n1-1)*S1 + (n2-1)*S2)/(n1+n2-2)
alpha <- 0.01
k <- 4
x.mean1 <- sapply(pain, mean)
x.mean2 <- sapply(nopain, mean)
x.mean <- x.mean1 - x.mean2
cfr.t <- qt(1-alpha/(2*k), n1+n2-2)
Bf <- cbind(inf = x.mean - cfr.t*sqrt(diag(Spooled)*(1/n1+1/n2)),
center = x.mean,
sup = x.mean + cfr.t*sqrt(diag(Spooled)*(1/n1+1/n2)))
Bf
